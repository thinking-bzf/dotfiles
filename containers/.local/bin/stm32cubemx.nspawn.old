#!/bin/env zsh

local app=${0:t}
local argv=($*)
local home=/home/$app
local host_conf=${XDG_CONFIG_HOME:-$HOME/.config}
local conf=$home/.config
local host_data=/usr/share
local data=$home/.local/share
local container_xdg_runtime_dir=/run/host/xdg_runtime

local container_options=(--as-pid2 --machine=$app --user=$app --chdir=$home)
local container_envs=(--setenv=XDG_RUNTIME_DIR=$container_xdg_runtime_dir)
local container_binds=(--tmpfs="$container_xdg_runtime_dir":uid=1000,gid=1000)

# Working Dir
container_binds+=(--bind=$HOME/Workspace/code/STM32:$home/workspace)

# Network
container_binds+=(--bind-ro=/etc/resolv.conf)

# Tray
local host_dbus=${DBUS_SESSION_BUS_ADDRESS#unix:path=}
local container_dbus=$container_xdg_runtime_dir/dbus
container_binds+=(--bind-ro=$host_dbus:$container_dbus)
container_envs+=(--setenv=DBUS_SESSION_BUS_ADDRESS=unix:path=$container_dbus)

# Sound
local host_pulse=/run/user/$UID/pulse
local container_pulse=$container_xdg_runtime_dir/pulse
container_binds+=(--bind-ro=$host_pulse:$container_pulse)
container_envs+=(--setenv=PULSE_SERVER=unix:$container_pulse/native)

# Icons
container_binds+=(--bind-ro=$host_data/icons:$data/icons)
container_envs+=(--setenv=XCURSOR_PATH=$data/icons)

# Fonts
container_binds+=(--bind-ro=$host_data/fonts:$data/fonts --bind-ro=$host_conf/fontconfig:$conf/fontconfig)
# container_envs+=(--setenv=_JAVA_OPTIONS="-Dawt.useSystemAAFontSettings=lcd -Dswing.aatext=true -Dsun.java2d.xrender=true")
container_envs+=(--setenv=_JAVA_OPTIONS="-Dawt.useSystemAAFontSettings=lcd")

# Display
# X.org
# see:https://wiki.archlinux.org/title/Systemd-nspawn#Use_an_X_environment
container_binds+=(--bind=/tmp/.X11-unix/)
container_envs+=(--setenv=DISPLAY=$DISPLAY)
# see:https://wiki.archlinux.org/title/Systemd-nspawn#Avoiding_xhost
local xauth_file=/tmp/xauth-$app
touch $xauth_file
xauth nextract - "$DISPLAY" | sed -e 's/^..../ffff/' | xauth -f "$xauth_file" nmerge -
container_options+=(--bind=$xauth_file --setenv=XAUTHORITY=$xauth_file)
# Wayland
# see:https://discuss.linuxcontainers.org/t/howto-use-the-hosts-wayland-and-xwayland-servers-inside-containers/8765
if [[ -d $WAYLAND_DISPLAY ]] {
    local host_wayland=/run/user/$UID/wayland-0
    local container_wayland=$container_xdg_runtime_dir/wayland-0
    container_binds+=(--bind=$host_wayland:$container_wayland)
    container_envs+=(--setenv=WAYLAND_DISPLAY=$WAYLAND_DISPLAY)
}

# Device
container_binds+=(--bind=/dev/dri/ --property=DeviceAllow='char-drm rw') # Graphic cards
container_binds+=(--bind=/dev/input/ --property=DeviceAllow='char-input r') # Joysticks
container_binds+=(--bind=/dev/uinput --property=DeviceAllow='char-input rw')

# NVIDIA
if [[ -n $(lsmod | grep -i nvidia) ]] {
    echo "nvidia graphic card detected, passthrough it."

    container_binds+=(--bind=/dev/shm --property=DeviceAllow='char-drm rw')
    container_binds+=(--bind=/dev/nvidia0 --property=DeviceAllow='char-drm rw')
    container_binds+=(--bind=/dev/nvidiactl --property=DeviceAllow='char-drm rw')
    container_binds+=(--bind=/dev/nvidia-modeset --property=DeviceAllow='char-drm rw')
    container_binds+=(
                        --bind=/usr/bin/nvidia-bug-report.sh:/usr/bin/nvidia-bug-report.sh \
                        --bind=/usr/bin/nvidia-cuda-mps-control:/usr/bin/nvidia-cuda-mps-control \
                        --bind=/usr/bin/nvidia-cuda-mps-server:/usr/bin/nvidia-cuda-mps-server \
                        --bind=/usr/bin/nvidia-debugdump:/usr/bin/nvidia-debugdump \
                        --bind=/usr/bin/nvidia-modprobe:/usr/bin/nvidia-modprobe \
                        --bind=/usr/bin/nvidia-ngx-updater:/usr/bin/nvidia-ngx-updater \
                        --bind=/usr/bin/nvidia-persistenced:/usr/bin/nvidia-persistenced \
                        --bind=/usr/bin/nvidia-powerd:/usr/bin/nvidia-powerd \
                        --bind=/usr/bin/nvidia-sleep.sh:/usr/bin/nvidia-sleep.sh \
                        --bind=/usr/bin/nvidia-smi:/usr/bin/nvidia-smi \
                        --bind=/usr/bin/nvidia-xconfig:/usr/bin/nvidia-xconfig \
                        --bind=/usr/lib/gbm/nvidia-drm_gbm.so:/usr/lib/x86_64-linux-gnu/gbm/nvidia-drm_gbm.so \
                        --bind=/usr/lib/libEGL_nvidia.so:/usr/lib/x86_64-linux-gnu/libEGL_nvidia.so \
                        --bind=/usr/lib/libGLESv1_CM_nvidia.so:/usr/lib/x86_64-linux-gnu/libGLESv1_CM_nvidia.so \
                        --bind=/usr/lib/libGLESv2_nvidia.so:/usr/lib/x86_64-linux-gnu/libGLESv2_nvidia.so \
                        --bind=/usr/lib/libGLX_nvidia.so:/usr/lib/x86_64-linux-gnu/libGLX_nvidia.so \
                        --bind=/usr/lib/libcuda.so:/usr/lib/x86_64-linux-gnu/libcuda.so \
                        --bind=/usr/lib/libnvcuvid.so:/usr/lib/x86_64-linux-gnu/libnvcuvid.so \
                        --bind=/usr/lib/libnvidia-allocator.so:/usr/lib/x86_64-linux-gnu/libnvidia-allocator.so \
                        --bind=/usr/lib/libnvidia-cfg.so:/usr/lib/x86_64-linux-gnu/libnvidia-cfg.so \
                        --bind=/usr/lib/libnvidia-egl-gbm.so:/usr/lib/x86_64-linux-gnu/libnvidia-egl-gbm.so \
                        --bind=/usr/lib/libnvidia-eglcore.so:/usr/lib/x86_64-linux-gnu/libnvidia-eglcore.so \
                        --bind=/usr/lib/libnvidia-encode.so:/usr/lib/x86_64-linux-gnu/libnvidia-encode.so \
                        --bind=/usr/lib/libnvidia-fbc.so:/usr/lib/x86_64-linux-gnu/libnvidia-fbc.so \
                        --bind=/usr/lib/libnvidia-glcore.so:/usr/lib/x86_64-linux-gnu/libnvidia-glcore.so \
                        --bind=/usr/lib/libnvidia-glsi.so:/usr/lib/x86_64-linux-gnu/libnvidia-glsi.so \
                        --bind=/usr/lib/libnvidia-glvkspirv.so:/usr/lib/x86_64-linux-gnu/libnvidia-glvkspirv.so \
                        --bind=/usr/lib/libnvidia-ml.so:/usr/lib/x86_64-linux-gnu/libnvidia-ml.so \
                        --bind=/usr/lib/libnvidia-ngx.so:/usr/lib/x86_64-linux-gnu/libnvidia-ngx.so \
                        --bind=/usr/lib/libnvidia-opticalflow.so:/usr/lib/x86_64-linux-gnu/libnvidia-opticalflow.so \
                        --bind=/usr/lib/libnvidia-ptxjitcompiler.so:/usr/lib/x86_64-linux-gnu/libnvidia-ptxjitcompiler.so \
                        --bind=/usr/lib/libnvidia-rtcore.so:/usr/lib/x86_64-linux-gnu/libnvidia-rtcore.so \
                        --bind=/usr/lib/libnvidia-tls.so:/usr/lib/x86_64-linux-gnu/libnvidia-tls.so \
                        --bind=/usr/lib/libnvidia-vulkan-producer.so:/usr/lib/x86_64-linux-gnu/libnvidia-vulkan-producer.so \
                        --bind=/usr/lib/libnvoptix.so:/usr/lib/x86_64-linux-gnu/libnvoptix.so \
                        --bind=/usr/lib/modprobe.d/nvidia-utils.conf:/usr/lib/x86_64-linux-gnu/modprobe.d/nvidia-utils.conf \
                        --bind=/usr/lib/nvidia/wine/_nvngx.dll:/usr/lib/x86_64-linux-gnu/nvidia/wine/_nvngx.dll \
                        --bind=/usr/lib/nvidia/wine/nvngx.dll:/usr/lib/x86_64-linux-gnu/nvidia/wine/nvngx.dll \
                        --bind=/usr/lib/nvidia/xorg/libglxserver_nvidia.so:/usr/lib/x86_64-linux-gnu/nvidia/xorg/libglxserver_nvidia.so \
                        --bind=/usr/lib/vdpau/libvdpau_nvidia.so:/usr/lib/x86_64-linux-gnu/vdpau/libvdpau_nvidia.so \
                        --bind=/usr/lib/xorg/modules/drivers/nvidia_drv.so:/usr/lib/x86_64-linux-gnu/xorg/modules/drivers/nvidia_drv.so \
                        --bind=/usr/share/X11/xorg.conf.d/10-nvidia-drm-outputclass.conf:/usr/share/X11/xorg.conf.d/10-nvidia-drm-outputclass.conf \
                        --bind=/usr/share/dbus-1/system.d/nvidia-dbus.conf:/usr/share/dbus-1/system.d/nvidia-dbus.conf \
                        --bind=/usr/share/egl/egl_external_platform.d/15_nvidia_gbm.json:/usr/share/egl/egl_external_platform.d/15_nvidia_gbm.json \
                        --bind=/usr/share/glvnd/egl_vendor.d/10_nvidia.json:/usr/share/glvnd/egl_vendor.d/10_nvidia.json \
                        --bind=/usr/share/licenses/nvidia-utils/LICENSE:/usr/share/licenses/nvidia-utils/LICENSE \
                        --bind=/usr/share/vulkan/icd.d/nvidia_icd.json:/usr/share/vulkan/icd.d/nvidia_icd.json \
                        --bind=/usr/share/vulkan/implicit_layer.d/nvidia_layers.json:/usr/share/vulkan/implicit_layer.d/nvidia_layers.json
                    )
    container_binds+=(--bind-ro=/usr/bin/prime-run)
}

#print -l $container_options

pkexec systemd-nspawn $container_options $container_binds $container_envs $app $argv

